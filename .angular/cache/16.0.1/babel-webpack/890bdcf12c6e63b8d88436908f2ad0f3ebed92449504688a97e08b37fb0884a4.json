{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/luisc/Desktop/clase/Ionic/Moviesostenible/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { r as registerInstance, c as createEvent, d as getIonMode, h, H as Host, e as getElement } from './core-ca0488fc.js';\nimport { b as config } from './config-3c7f3790.js';\nimport { d as debounceEvent } from './helpers-46f4a262.js';\nimport { c as createColorClasses } from './theme-18cbe2cc.js';\nimport { s as sanitizeDOMString } from './index-3476b023.js';\nconst Searchbar = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.isCancelVisible = false;\n    this.shouldAlignLeft = true;\n    this.focused = false;\n    this.noAnimate = true;\n    /**\n     * If `true`, enable searchbar animation.\n     */\n    this.animated = false;\n    /**\n     * Set the input's autocomplete property.\n     */\n    this.autocomplete = 'off';\n    /**\n     * Set the input's autocorrect property.\n     */\n    this.autocorrect = 'off';\n    /**\n     * Set the cancel button icon. Only applies to `md` mode.\n     */\n    this.cancelButtonIcon = 'md-arrow-back';\n    /**\n     * Set the the cancel button text. Only applies to `ios` mode.\n     */\n    this.cancelButtonText = 'Cancel';\n    /**\n     * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke.\n     */\n    this.debounce = 250;\n    /**\n     * If `true`, the user cannot interact with the input.\n     */\n    this.disabled = false;\n    /**\n     * A hint to the browser for which keyboard to display.\n     * Possible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\n     * `\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.\n     */\n    this.inputmode = 'search';\n    /**\n     * Set the input's placeholder.\n     * `placeholder` can accept either plaintext or HTML as a string.\n     * To display characters normally reserved for HTML, they\n     * must be escaped. For example `<Ionic>` would become\n     * `&lt;Ionic&gt;`\n     *\n     * For more information: [Security Documentation](https://ionicframework.com/docs/faq/security)\n     */\n    this.placeholder = 'Search';\n    /**\n     * The icon to use as the search icon.\n     */\n    this.searchIcon = 'search';\n    /**\n     * Sets the behavior for the cancel button. Defaults to `\"never\"`.\n     * Setting to `\"focus\"` shows the cancel button on focus.\n     * Setting to `\"never\"` hides the cancel button.\n     * Setting to `\"always\"` shows the cancel button regardless\n     * of focus state.\n     */\n    this.showCancelButton = 'never';\n    /**\n     * If `true`, enable spellcheck on the input.\n     */\n    this.spellcheck = false;\n    /**\n     * Set the type of the input.\n     */\n    this.type = 'search';\n    /**\n     * the value of the searchbar.\n     */\n    this.value = '';\n    /**\n     * Clears the input field and triggers the control change.\n     */\n    this.onClearInput = ev => {\n      this.ionClear.emit();\n      if (ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n      // setTimeout() fixes https://github.com/ionic-team/ionic/issues/7527\n      // wait for 4 frames\n      setTimeout(() => {\n        const value = this.getValue();\n        if (value !== '') {\n          this.value = '';\n          this.ionInput.emit();\n        }\n      }, 16 * 4);\n    };\n    /**\n     * Clears the input field and tells the input to blur since\n     * the clearInput function doesn't want the input to blur\n     * then calls the custom cancel function if the user passed one in.\n     */\n    this.onCancelSearchbar = ev => {\n      if (ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n      this.ionCancel.emit();\n      this.onClearInput();\n      if (this.nativeInput) {\n        this.nativeInput.blur();\n      }\n    };\n    /**\n     * Update the Searchbar input value when the input changes\n     */\n    this.onInput = ev => {\n      const input = ev.target;\n      if (input) {\n        this.value = input.value;\n      }\n      this.ionInput.emit(ev);\n    };\n    /**\n     * Sets the Searchbar to not focused and checks if it should align left\n     * based on whether there is a value in the searchbar or not.\n     */\n    this.onBlur = () => {\n      this.focused = false;\n      this.ionBlur.emit();\n      this.positionElements();\n    };\n    /**\n     * Sets the Searchbar to focused and active on input focus.\n     */\n    this.onFocus = () => {\n      this.focused = true;\n      this.ionFocus.emit();\n      this.positionElements();\n    };\n    this.ionInput = createEvent(this, \"ionInput\", 7);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    this.ionCancel = createEvent(this, \"ionCancel\", 7);\n    this.ionClear = createEvent(this, \"ionClear\", 7);\n    this.ionBlur = createEvent(this, \"ionBlur\", 7);\n    this.ionFocus = createEvent(this, \"ionFocus\", 7);\n    this.ionStyle = createEvent(this, \"ionStyle\", 7);\n  }\n  debounceChanged() {\n    this.ionChange = debounceEvent(this.ionChange, this.debounce);\n  }\n  valueChanged() {\n    const inputEl = this.nativeInput;\n    const value = this.getValue();\n    if (inputEl && inputEl.value !== value) {\n      inputEl.value = value;\n    }\n    this.ionChange.emit({\n      value\n    });\n  }\n  showCancelButtonChanged() {\n    requestAnimationFrame(() => {\n      this.positionElements();\n      this.el.forceUpdate();\n    });\n  }\n  connectedCallback() {\n    this.emitStyle();\n  }\n  componentDidLoad() {\n    if (this.showCancelButton === 'false' || this.showCancelButton === false) {\n      console.warn('The boolean values of showCancelButton are deprecated. Please use \"never\" instead of \"false\".');\n    }\n    if (this.showCancelButton === '' || this.showCancelButton === 'true' || this.showCancelButton === true) {\n      console.warn('The boolean values of showCancelButton are deprecated. Please use \"focus\" instead of \"true\".');\n    }\n    this.positionElements();\n    this.debounceChanged();\n    setTimeout(() => {\n      this.noAnimate = false;\n    }, 300);\n  }\n  emitStyle() {\n    this.ionStyle.emit({\n      'searchbar': true\n    });\n  }\n  /**\n   * Sets focus on the specified `ion-searchbar`. Use this method instead of the global\n   * `input.focus()`.\n   */\n  setFocus() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.nativeInput) {\n        _this.nativeInput.focus();\n      }\n    })();\n  }\n  /**\n   * Returns the native `<input>` element used under the hood.\n   */\n  getInputElement() {\n    return Promise.resolve(this.nativeInput);\n  }\n  /**\n   * Positions the input search icon, placeholder, and the cancel button\n   * based on the input value and if it is focused. (ios only)\n   */\n  positionElements() {\n    const value = this.getValue();\n    const prevAlignLeft = this.shouldAlignLeft;\n    const mode = getIonMode(this);\n    const shouldAlignLeft = !this.animated || value.trim() !== '' || !!this.focused;\n    this.shouldAlignLeft = shouldAlignLeft;\n    if (mode !== 'ios') {\n      return;\n    }\n    if (prevAlignLeft !== shouldAlignLeft) {\n      this.positionPlaceholder();\n    }\n    if (this.animated) {\n      this.positionCancelButton();\n    }\n  }\n  /**\n   * Positions the input placeholder\n   */\n  positionPlaceholder() {\n    const inputEl = this.nativeInput;\n    if (!inputEl) {\n      return;\n    }\n    const isRTL = document.dir === 'rtl';\n    const iconEl = (this.el.shadowRoot || this.el).querySelector('.searchbar-search-icon');\n    if (this.shouldAlignLeft) {\n      inputEl.removeAttribute('style');\n      iconEl.removeAttribute('style');\n    } else {\n      // Create a dummy span to get the placeholder width\n      const doc = document;\n      const tempSpan = doc.createElement('span');\n      tempSpan.innerHTML = sanitizeDOMString(this.placeholder) || '';\n      doc.body.appendChild(tempSpan);\n      // Get the width of the span then remove it\n      const textWidth = tempSpan.offsetWidth;\n      tempSpan.remove();\n      // Calculate the input padding\n      const inputLeft = 'calc(50% - ' + textWidth / 2 + 'px)';\n      // Calculate the icon margin\n      const iconLeft = 'calc(50% - ' + (textWidth / 2 + 30) + 'px)';\n      // Set the input padding start and icon margin start\n      if (isRTL) {\n        inputEl.style.paddingRight = inputLeft;\n        iconEl.style.marginRight = iconLeft;\n      } else {\n        inputEl.style.paddingLeft = inputLeft;\n        iconEl.style.marginLeft = iconLeft;\n      }\n    }\n  }\n  /**\n   * Show the iOS Cancel button on focus, hide it offscreen otherwise\n   */\n  positionCancelButton() {\n    const isRTL = document.dir === 'rtl';\n    const cancelButton = (this.el.shadowRoot || this.el).querySelector('.searchbar-cancel-button');\n    const shouldShowCancel = this.shouldShowCancelButton();\n    if (cancelButton && shouldShowCancel !== this.isCancelVisible) {\n      const cancelStyle = cancelButton.style;\n      this.isCancelVisible = shouldShowCancel;\n      if (shouldShowCancel) {\n        if (isRTL) {\n          cancelStyle.marginLeft = '0';\n        } else {\n          cancelStyle.marginRight = '0';\n        }\n      } else {\n        const offset = cancelButton.offsetWidth;\n        if (offset > 0) {\n          if (isRTL) {\n            cancelStyle.marginLeft = -offset + 'px';\n          } else {\n            cancelStyle.marginRight = -offset + 'px';\n          }\n        }\n      }\n    }\n  }\n  getValue() {\n    return this.value || '';\n  }\n  hasValue() {\n    return this.getValue() !== '';\n  }\n  /**\n   * Determines whether or not the cancel button should be visible onscreen.\n   * Cancel button should be shown if one of two conditions applies:\n   * 1. `showCancelButton` is set to `always`.\n   * 2. `showCancelButton` is set to `focus`, and the searchbar has been focused.\n   */\n  shouldShowCancelButton() {\n    if (isCancelButtonSetToNever(this.showCancelButton) || isCancelButtonSetToFocus(this.showCancelButton) && !this.focused) {\n      return false;\n    }\n    return true;\n  }\n  render() {\n    const animated = this.animated && config.getBoolean('animated', true);\n    const mode = getIonMode(this);\n    const clearIcon = this.clearIcon || (mode === 'ios' ? 'ios-close-circle' : 'md-close');\n    const searchIcon = this.searchIcon;\n    const cancelButton = !isCancelButtonSetToNever(this.showCancelButton) && h(\"button\", {\n      \"aria-label\": \"cancel\",\n      type: \"button\",\n      tabIndex: mode === 'ios' && !this.shouldShowCancelButton() ? -1 : undefined,\n      onMouseDown: this.onCancelSearchbar,\n      onTouchStart: this.onCancelSearchbar,\n      class: \"searchbar-cancel-button\"\n    }, h(\"div\", null, mode === 'md' ? h(\"ion-icon\", {\n      \"aria-hidden\": \"true\",\n      mode: mode,\n      icon: this.cancelButtonIcon,\n      lazy: false\n    }) : this.cancelButtonText));\n    return h(Host, {\n      role: \"search\",\n      \"aria-disabled\": this.disabled ? 'true' : null,\n      class: Object.assign(Object.assign({}, createColorClasses(this.color)), {\n        [mode]: true,\n        'searchbar-animated': animated,\n        'searchbar-disabled': this.disabled,\n        'searchbar-no-animate': animated && this.noAnimate,\n        'searchbar-has-value': this.hasValue(),\n        'searchbar-left-aligned': this.shouldAlignLeft,\n        'searchbar-has-focus': this.focused,\n        'searchbar-should-show-cancel': this.shouldShowCancelButton()\n      })\n    }, h(\"div\", {\n      class: \"searchbar-input-container\"\n    }, h(\"input\", {\n      \"aria-label\": \"search text\",\n      disabled: this.disabled,\n      ref: el => this.nativeInput = el,\n      class: \"searchbar-input\",\n      inputMode: this.inputmode,\n      onInput: this.onInput,\n      onBlur: this.onBlur,\n      onFocus: this.onFocus,\n      placeholder: this.placeholder,\n      type: this.type,\n      value: this.getValue(),\n      autoComplete: this.autocomplete,\n      autoCorrect: this.autocorrect,\n      spellCheck: this.spellcheck\n    }), mode === 'md' && cancelButton, h(\"ion-icon\", {\n      mode: mode,\n      icon: searchIcon,\n      lazy: false,\n      class: \"searchbar-search-icon\"\n    }), h(\"button\", {\n      \"aria-label\": \"reset\",\n      type: \"button\",\n      \"no-blur\": true,\n      class: \"searchbar-clear-button\",\n      onMouseDown: this.onClearInput,\n      onTouchStart: this.onClearInput\n    }, h(\"ion-icon\", {\n      \"aria-hidden\": \"true\",\n      mode: mode,\n      icon: clearIcon,\n      lazy: false,\n      class: \"searchbar-clear-icon\"\n    }))), mode === 'ios' && cancelButton);\n  }\n  get el() {\n    return getElement(this);\n  }\n  static get watchers() {\n    return {\n      \"debounce\": [\"debounceChanged\"],\n      \"value\": [\"valueChanged\"],\n      \"showCancelButton\": [\"showCancelButtonChanged\"]\n    };\n  }\n  static get style() {\n    return \".sc-ion-searchbar-ios-h{--placeholder-color:initial;--placeholder-font-style:initial;--placeholder-font-weight:initial;--placeholder-opacity:.5;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;width:100%;color:var(--color);font-family:var(--ion-font-family,inherit);-webkit-box-sizing:border-box;box-sizing:border-box}.ion-color.sc-ion-searchbar-ios-h{color:var(--ion-color-contrast)}.ion-color.sc-ion-searchbar-ios-h .searchbar-input.sc-ion-searchbar-ios{background:var(--ion-color-base)}.ion-color.sc-ion-searchbar-ios-h .searchbar-cancel-button.sc-ion-searchbar-ios, .ion-color.sc-ion-searchbar-ios-h .searchbar-clear-button.sc-ion-searchbar-ios, .ion-color.sc-ion-searchbar-ios-h .searchbar-search-icon.sc-ion-searchbar-ios{color:inherit}.searchbar-search-icon.sc-ion-searchbar-ios{color:var(--icon-color);pointer-events:none}.searchbar-input-container.sc-ion-searchbar-ios{display:block;position:relative;-ms-flex-negative:1;flex-shrink:1;width:100%}.searchbar-input.sc-ion-searchbar-ios{font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;-webkit-box-sizing:border-box;box-sizing:border-box;display:block;width:100%;border:0;outline:none;background:var(--background);font-family:inherit;-webkit-appearance:none;-moz-appearance:none;appearance:none}.searchbar-input.sc-ion-searchbar-ios::-webkit-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.searchbar-input.sc-ion-searchbar-ios::-moz-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.searchbar-input.sc-ion-searchbar-ios:-ms-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.searchbar-input.sc-ion-searchbar-ios::-ms-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.searchbar-input.sc-ion-searchbar-ios::placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.searchbar-input.sc-ion-searchbar-ios::-ms-clear, .searchbar-input.sc-ion-searchbar-ios::-webkit-search-cancel-button{display:none}.searchbar-cancel-button.sc-ion-searchbar-ios{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;display:none;height:100%;border:0;outline:none;color:var(--cancel-button-color);cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none}.searchbar-cancel-button.sc-ion-searchbar-ios > div.sc-ion-searchbar-ios{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%}.searchbar-clear-button.sc-ion-searchbar-ios{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;display:none;min-height:0;outline:none;color:var(--clear-button-color);-webkit-appearance:none;-moz-appearance:none;appearance:none}.searchbar-has-value.searchbar-has-focus.sc-ion-searchbar-ios-h .searchbar-clear-button.sc-ion-searchbar-ios{display:block}.searchbar-disabled.sc-ion-searchbar-ios-h{cursor:default;opacity:.4;pointer-events:none}.sc-ion-searchbar-ios-h{--clear-button-color:var(--ion-color-step-600,#666);--cancel-button-color:var(--ion-color-primary,#3880ff);--color:var(--ion-text-color,#000);--icon-color:var(--ion-color-step-600,#666);--background:rgba(var(--ion-text-color-rgb,0,0,0),0.07);padding-left:12px;padding-right:12px;padding-top:12px;padding-bottom:12px;height:60px;contain:strict}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.sc-ion-searchbar-ios-h{padding-left:unset;padding-right:unset;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px}}.searchbar-input-container.sc-ion-searchbar-ios{height:36px;contain:strict}.searchbar-search-icon.sc-ion-searchbar-ios{margin-left:calc(50% - 60px);left:5px;top:0;position:absolute;width:22px;height:100%;contain:strict}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.searchbar-search-icon.sc-ion-searchbar-ios{margin-left:unset;-webkit-margin-start:calc(50% - 60px);margin-inline-start:calc(50% - 60px)}}[dir=rtl].sc-ion-searchbar-ios-h .searchbar-search-icon.sc-ion-searchbar-ios, [dir=rtl] .sc-ion-searchbar-ios-h .searchbar-search-icon.sc-ion-searchbar-ios, [dir=rtl].sc-ion-searchbar-ios .searchbar-search-icon.sc-ion-searchbar-ios{left:unset;right:unset;right:5px}.searchbar-input.sc-ion-searchbar-ios{padding-left:28px;padding-right:28px;padding-top:0;padding-bottom:0;border-radius:10px;height:100%;font-size:17px;font-weight:400;contain:strict}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.searchbar-input.sc-ion-searchbar-ios{padding-left:unset;padding-right:unset;-webkit-padding-start:28px;padding-inline-start:28px;-webkit-padding-end:28px;padding-inline-end:28px}}.searchbar-clear-button.sc-ion-searchbar-ios{right:0;top:0;background-position:50%;position:absolute;width:30px;height:100%;border:0;background-color:transparent}[dir=rtl].sc-ion-searchbar-ios-h .searchbar-clear-button.sc-ion-searchbar-ios, [dir=rtl] .sc-ion-searchbar-ios-h .searchbar-clear-button.sc-ion-searchbar-ios, [dir=rtl].sc-ion-searchbar-ios .searchbar-clear-button.sc-ion-searchbar-ios{left:unset;right:unset;left:0}.searchbar-clear-icon.sc-ion-searchbar-ios{width:18px;height:100%}.searchbar-cancel-button.sc-ion-searchbar-ios{padding-left:8px;padding-right:0;padding-top:0;padding-bottom:0;-ms-flex-negative:0;flex-shrink:0;background-color:transparent;font-size:16px}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.searchbar-cancel-button.sc-ion-searchbar-ios{padding-left:unset;padding-right:unset;-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:0;padding-inline-end:0}}.searchbar-left-aligned.sc-ion-searchbar-ios-h .searchbar-search-icon.sc-ion-searchbar-ios{margin-left:0}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.searchbar-left-aligned.sc-ion-searchbar-ios-h .searchbar-search-icon.sc-ion-searchbar-ios{margin-left:unset;-webkit-margin-start:0;margin-inline-start:0}}.searchbar-left-aligned.sc-ion-searchbar-ios-h .searchbar-input.sc-ion-searchbar-ios{padding-left:30px}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.searchbar-left-aligned.sc-ion-searchbar-ios-h .searchbar-input.sc-ion-searchbar-ios{padding-left:unset;-webkit-padding-start:30px;padding-inline-start:30px}}.searchbar-animated.sc-ion-searchbar-ios-h .searchbar-cancel-button.sc-ion-searchbar-ios, .searchbar-has-focus.sc-ion-searchbar-ios-h .searchbar-cancel-button.sc-ion-searchbar-ios, .searchbar-should-show-cancel.sc-ion-searchbar-ios-h .searchbar-cancel-button.sc-ion-searchbar-ios{display:block}.searchbar-animated.sc-ion-searchbar-ios-h .searchbar-input.sc-ion-searchbar-ios, .searchbar-animated.sc-ion-searchbar-ios-h .searchbar-search-icon.sc-ion-searchbar-ios{-webkit-transition:all .3s ease;transition:all .3s ease}.searchbar-animated.searchbar-has-focus.sc-ion-searchbar-ios-h .searchbar-cancel-button.sc-ion-searchbar-ios, .searchbar-animated.searchbar-should-show-cancel.sc-ion-searchbar-ios-h .searchbar-cancel-button.sc-ion-searchbar-ios{opacity:1;pointer-events:auto}.searchbar-animated.sc-ion-searchbar-ios-h .searchbar-cancel-button.sc-ion-searchbar-ios{margin-right:-100%;-webkit-transform:translateZ(0);transform:translateZ(0);-webkit-transition:all .3s ease;transition:all .3s ease;opacity:0;pointer-events:none}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.searchbar-animated.sc-ion-searchbar-ios-h .searchbar-cancel-button.sc-ion-searchbar-ios{margin-right:unset;-webkit-margin-end:-100%;margin-inline-end:-100%}}.searchbar-no-animate.sc-ion-searchbar-ios-h .searchbar-cancel-button.sc-ion-searchbar-ios, .searchbar-no-animate.sc-ion-searchbar-ios-h .searchbar-input.sc-ion-searchbar-ios, .searchbar-no-animate.sc-ion-searchbar-ios-h .searchbar-search-icon.sc-ion-searchbar-ios{-webkit-transition-duration:0ms;transition-duration:0ms}.ion-color.sc-ion-searchbar-ios-h .searchbar-cancel-button.sc-ion-searchbar-ios{color:var(--ion-color-base)}\\@media (any-hover:hover){.ion-color.sc-ion-searchbar-ios-h .searchbar-cancel-button.sc-ion-searchbar-ios:hover{color:var(--ion-color-tint)}}ion-toolbar.sc-ion-searchbar-ios-h, ion-toolbar .sc-ion-searchbar-ios-h{padding-top:1px;padding-bottom:15px;height:52px}ion-toolbar.ion-color.sc-ion-searchbar-ios-h:not(.ion-color), ion-toolbar.ion-color .sc-ion-searchbar-ios-h:not(.ion-color){color:inherit}ion-toolbar.ion-color.sc-ion-searchbar-ios-h:not(.ion-color) .searchbar-cancel-button.sc-ion-searchbar-ios, ion-toolbar.ion-color .sc-ion-searchbar-ios-h:not(.ion-color) .searchbar-cancel-button.sc-ion-searchbar-ios{color:currentColor}ion-toolbar.ion-color.sc-ion-searchbar-ios-h .searchbar-search-icon.sc-ion-searchbar-ios, ion-toolbar.ion-color .sc-ion-searchbar-ios-h .searchbar-search-icon.sc-ion-searchbar-ios{color:currentColor;opacity:.5}ion-toolbar.ion-color.sc-ion-searchbar-ios-h:not(.ion-color) .searchbar-input.sc-ion-searchbar-ios, ion-toolbar.ion-color .sc-ion-searchbar-ios-h:not(.ion-color) .searchbar-input.sc-ion-searchbar-ios{background:rgba(var(--ion-color-contrast-rgb),.07);color:currentColor}ion-toolbar.ion-color.sc-ion-searchbar-ios-h:not(.ion-color) .searchbar-clear-button.sc-ion-searchbar-ios, ion-toolbar.ion-color .sc-ion-searchbar-ios-h:not(.ion-color) .searchbar-clear-button.sc-ion-searchbar-ios{color:currentColor;opacity:.5}\";\n  }\n};\n/**\n * Check if the cancel button should never be shown.\n *\n * TODO: Remove this when the `true` and `false`\n * options are removed.\n */\nconst isCancelButtonSetToNever = showCancelButton => {\n  return showCancelButton === 'never' || showCancelButton === 'false' || showCancelButton === false;\n};\n/**\n * Check if the cancel button should be shown on focus.\n *\n * TODO: Remove this when the `true` and `false`\n * options are removed.\n */\nconst isCancelButtonSetToFocus = showCancelButton => {\n  return showCancelButton === 'focus' || showCancelButton === 'true' || showCancelButton === true || showCancelButton === '';\n};\nexport { Searchbar as ion_searchbar };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
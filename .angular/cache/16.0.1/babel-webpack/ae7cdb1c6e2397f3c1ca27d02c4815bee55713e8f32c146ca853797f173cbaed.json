{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/luisc/Desktop/clase/Ionic/Moviesostenible/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { r as registerInstance, d as getIonMode, h, H as Host } from './core-ca0488fc.js';\nimport './config-3c7f3790.js';\nimport { h as createOverlay, j as dismissOverlay, k as getOverlay } from './overlays-10640d86.js';\nimport { o as openURL, c as createColorClasses } from './theme-18cbe2cc.js';\nconst ActionSheetController = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create an action sheet overlay with action sheet options.\n   *\n   * @param options The options to use to create the action sheet.\n   */\n  create(options) {\n    return createOverlay('ion-action-sheet', options);\n  }\n  /**\n   * Dismiss the open action sheet overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the action sheet.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the action sheet.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   * @param id The id of the action sheet to dismiss. If an id is not provided, it will dismiss the most recently opened action sheet.\n   */\n  dismiss(data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-action-sheet', id);\n  }\n  /**\n   * Get the most recently opened action sheet overlay.\n   */\n  getTop() {\n    return _asyncToGenerator(function* () {\n      return getOverlay(document, 'ion-action-sheet');\n    })();\n  }\n};\nconst AlertController = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create an alert overlay with alert options.\n   *\n   * @param options The options to use to create the alert.\n   */\n  create(options) {\n    return createOverlay('ion-alert', options);\n  }\n  /**\n   * Dismiss the open alert overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the alert.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the alert.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   * @param id The id of the alert to dismiss. If an id is not provided, it will dismiss the most recently opened alert.\n   */\n  dismiss(data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-alert', id);\n  }\n  /**\n   * Get the most recently opened alert overlay.\n   */\n  getTop() {\n    return _asyncToGenerator(function* () {\n      return getOverlay(document, 'ion-alert');\n    })();\n  }\n};\nconst Anchor = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * When using a router, it specifies the transition direction when navigating to\n     * another page using `href`.\n     */\n    this.routerDirection = 'forward';\n    this.onClick = ev => {\n      openURL(this.href, ev, this.routerDirection);\n    };\n  }\n  componentDidLoad() {\n    console.warn('[DEPRECATED][ion-anchor] The <ion-anchor> component has been deprecated. Please use an <ion-router-link> if you are using a vanilla JS or Stencil project or an <a> with the Angular router.');\n  }\n  render() {\n    const mode = getIonMode(this);\n    const attrs = {\n      href: this.href,\n      rel: this.rel\n    };\n    return h(Host, {\n      onClick: this.onClick,\n      class: Object.assign(Object.assign({}, createColorClasses(this.color)), {\n        [mode]: true,\n        'ion-activatable': true\n      })\n    }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null)));\n  }\n  static get style() {\n    return \":host{--background:transparent;--color:var(--ion-color-primary,#3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\n  }\n};\nconst LoadingController = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create a loading overlay with loading options.\n   *\n   * @param options The options to use to create the loading.\n   */\n  create(options) {\n    return createOverlay('ion-loading', options);\n  }\n  /**\n   * Dismiss the open loading overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the loading.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the loading.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   * @param id The id of the loading to dismiss. If an id is not provided, it will dismiss the most recently opened loading.\n   */\n  dismiss(data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-loading', id);\n  }\n  /**\n   * Get the most recently opened loading overlay.\n   */\n  getTop() {\n    return _asyncToGenerator(function* () {\n      return getOverlay(document, 'ion-loading');\n    })();\n  }\n};\nconst ModalController = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create a modal overlay with modal options.\n   *\n   * @param options The options to use to create the modal.\n   */\n  create(options) {\n    return createOverlay('ion-modal', options);\n  }\n  /**\n   * Dismiss the open modal overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the modal.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the modal.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   * @param id The id of the modal to dismiss. If an id is not provided, it will dismiss the most recently opened modal.\n   */\n  dismiss(data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-modal', id);\n  }\n  /**\n   * Get the most recently opened modal overlay.\n   */\n  getTop() {\n    return _asyncToGenerator(function* () {\n      return getOverlay(document, 'ion-modal');\n    })();\n  }\n};\nconst PickerController = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create a picker overlay with picker options.\n   *\n   * @param options The options to use to create the picker.\n   */\n  create(options) {\n    return createOverlay('ion-picker', options);\n  }\n  /**\n   * Dismiss the open picker overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the picker.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the picker.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   * @param id The id of the picker to dismiss. If an id is not provided, it will dismiss the most recently opened picker.\n   */\n  dismiss(data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-picker', id);\n  }\n  /**\n   * Get the most recently opened picker overlay.\n   */\n  getTop() {\n    return _asyncToGenerator(function* () {\n      return getOverlay(document, 'ion-picker');\n    })();\n  }\n};\nconst PopoverController = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create a popover overlay with popover options.\n   *\n   * @param options The options to use to create the popover.\n   */\n  create(options) {\n    return createOverlay('ion-popover', options);\n  }\n  /**\n   * Dismiss the open popover overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the popover.\n   * This can be useful in a button handler for determining which button was\n   * clicked to dismiss the popover.\n   * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n   * @param id The id of the popover to dismiss. If an id is not provided, it will dismiss the most recently opened popover.\n   */\n  dismiss(data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-popover', id);\n  }\n  /**\n   * Get the most recently opened popover overlay.\n   */\n  getTop() {\n    return _asyncToGenerator(function* () {\n      return getOverlay(document, 'ion-popover');\n    })();\n  }\n};\nconst ToastController = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  /**\n   * Create a toast overlay with toast options.\n   *\n   * @param options The options to use to create the toast.\n   */\n  create(options) {\n    return createOverlay('ion-toast', options);\n  }\n  /**\n   * Dismiss the open toast overlay.\n   *\n   * @param data Any data to emit in the dismiss events.\n   * @param role The role of the element that is dismissing the toast. For example, 'cancel' or 'backdrop'.\n   * @param id The id of the toast to dismiss. If an id is not provided, it will dismiss the most recently opened toast.\n   */\n  dismiss(data, role, id) {\n    return dismissOverlay(document, data, role, 'ion-toast', id);\n  }\n  /**\n   * Get the most recently opened toast overlay.\n   */\n  getTop() {\n    return _asyncToGenerator(function* () {\n      return getOverlay(document, 'ion-toast');\n    })();\n  }\n};\nexport { ActionSheetController as ion_action_sheet_controller, AlertController as ion_alert_controller, Anchor as ion_anchor, LoadingController as ion_loading_controller, ModalController as ion_modal_controller, PickerController as ion_picker_controller, PopoverController as ion_popover_controller, ToastController as ion_toast_controller };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}